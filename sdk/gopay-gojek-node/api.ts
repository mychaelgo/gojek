/* tslint:disable */
/* eslint-disable */
/**
 * customer.gopayapi.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200Data}
     * @memberof InlineResponse200
     */
    'data'?: InlineResponse200Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse200
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {InlineResponse2001Data}
     * @memberof InlineResponse2001
     */
    'data'?: InlineResponse2001Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2001
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Data
 */
export interface InlineResponse2001Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'qr_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001Data
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001Data
     */
    'is_pin_setup'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<InlineResponse2002Data>}
     * @memberof InlineResponse2002
     */
    'data'?: Array<InlineResponse2002Data>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2002
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2002AdditionalDetails
 */
export interface InlineResponse2002AdditionalDetails {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002AdditionalDetails
     */
    'kyc_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002AdditionalDetails
     */
    'kyc_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002AdditionalDetails
     */
    'group_id'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Data
 */
export interface InlineResponse2002Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Data
     */
    'type'?: string;
    /**
     * 
     * @type {InlineResponse2002AdditionalDetails}
     * @memberof InlineResponse2002Data
     */
    'additional_details'?: InlineResponse2002AdditionalDetails;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<InlineResponse2003Data>}
     * @memberof InlineResponse2003
     */
    'data'?: Array<InlineResponse2003Data>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Balance
 */
export interface InlineResponse2003Balance {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Balance
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Balance
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Balance
     */
    'display_value'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Data
 */
export interface InlineResponse2003Data {
    /**
     * 
     * @type {InlineResponse2003Balance}
     * @memberof InlineResponse2003Data
     */
    'balance'?: InlineResponse2003Balance;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'country_code'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {InlineResponse2004Data}
     * @memberof InlineResponse2004
     */
    'data'?: InlineResponse2004Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2004
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2004
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Data
 */
export interface InlineResponse2004Data {
    /**
     * 
     * @type {Array<InlineResponse2004DataCountryFilters>}
     * @memberof InlineResponse2004Data
     */
    'country_filters'?: Array<InlineResponse2004DataCountryFilters>;
    /**
     * 
     * @type {InlineResponse2004DataDateFilter}
     * @memberof InlineResponse2004Data
     */
    'date_filter'?: InlineResponse2004DataDateFilter;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2004Data
     */
    'show_payment_type_filter'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2004DataCountryFilters
 */
export interface InlineResponse2004DataCountryFilters {
    /**
     * 
     * @type {Array<InlineResponse2004DataProductFilters>}
     * @memberof InlineResponse2004DataCountryFilters
     */
    'product_filters'?: Array<InlineResponse2004DataProductFilters>;
    /**
     * 
     * @type {Array<InlineResponse2004DataProductFilters>}
     * @memberof InlineResponse2004DataCountryFilters
     */
    'payment_filters'?: Array<InlineResponse2004DataProductFilters>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataCountryFilters
     */
    'country_code'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004DataDateFilter
 */
export interface InlineResponse2004DataDateFilter {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataDateFilter
     */
    'min_date'?: string;
    /**
     * 
     * @type {Array<InlineResponse2004DataDateFilterPrefilledDates>}
     * @memberof InlineResponse2004DataDateFilter
     */
    'prefilled_dates'?: Array<InlineResponse2004DataDateFilterPrefilledDates>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004DataDateFilterPrefilledDates
 */
export interface InlineResponse2004DataDateFilterPrefilledDates {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004DataDateFilterPrefilledDates
     */
    'days'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataDateFilterPrefilledDates
     */
    'display_text'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004DataProductFilters
 */
export interface InlineResponse2004DataProductFilters {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataProductFilters
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataProductFilters
     */
    'display_text'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004DataProductFilters
     */
    'image_url'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<InlineResponse2005Data>}
     * @memberof InlineResponse2005
     */
    'data'?: Array<InlineResponse2005Data>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2005
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Data
 */
export interface InlineResponse2005Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Data
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'bank_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'bank_short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'account_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'account_number'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2005Data
     */
    'is_my_account'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2005Data
     */
    'metadata'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2005Data
     */
    'is_withdrawal_blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'bank_icon_url'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {InlineResponse2006Data}
     * @memberof InlineResponse2006
     */
    'data'?: InlineResponse2006Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Data
 */
export interface InlineResponse2006Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006Data
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006Data
     */
    'service_fee'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006Data
     */
    'total_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {InlineResponse2007Data}
     * @memberof InlineResponse2007
     */
    'data'?: InlineResponse2007Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2007
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007Data
 */
export interface InlineResponse2007Data {
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2007Data
     */
    'in_progress'?: Array<any>;
    /**
     * 
     * @type {Array<InlineResponse2007DataCompleted>}
     * @memberof InlineResponse2007Data
     */
    'completed'?: Array<InlineResponse2007DataCompleted>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007Data
     */
    'next'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2007Data
     */
    'info_cards'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataCompleted
 */
export interface InlineResponse2007DataCompleted {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataCompleted
     */
    'group_key'?: string;
    /**
     * 
     * @type {Array<InlineResponse2007DataItems>}
     * @memberof InlineResponse2007DataCompleted
     */
    'items'?: Array<InlineResponse2007DataItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataDetailViewItems
 */
export interface InlineResponse2007DataDetailViewItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataDetailViewItems
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataDetailViewItems
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007DataDetailViewItems
     */
    'separator'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007DataDetailViewItems
     */
    'copyable'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataExpenseInfo
 */
export interface InlineResponse2007DataExpenseInfo {
    /**
     * 
     * @type {InlineResponse2007DataExpenseInfoCategory}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'category'?: InlineResponse2007DataExpenseInfoCategory;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'is_expense'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'section_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfo
     */
    'info_icon'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataExpenseInfoCategory
 */
export interface InlineResponse2007DataExpenseInfoCategory {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfoCategory
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfoCategory
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfoCategory
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataExpenseInfoCategory
     */
    'icon_url'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataItems
 */
export interface InlineResponse2007DataItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'order_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'service_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'display_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'order_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'order_image'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'payment_type'?: string;
    /**
     * 
     * @type {InlineResponse2003Balance}
     * @memberof InlineResponse2007DataItems
     */
    'amount'?: InlineResponse2003Balance;
    /**
     * 
     * @type {Array<InlineResponse2007DataPaymentMethodBreakup>}
     * @memberof InlineResponse2007DataItems
     */
    'payment_method_breakup'?: Array<InlineResponse2007DataPaymentMethodBreakup>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataItems
     */
    'detail_description'?: string;
    /**
     * 
     * @type {Array<InlineResponse2007DataDetailViewItems>}
     * @memberof InlineResponse2007DataItems
     */
    'detail_view_items'?: Array<InlineResponse2007DataDetailViewItems>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007DataItems
     */
    'not_have_details'?: boolean;
    /**
     * 
     * @type {InlineResponse2007DataExpenseInfo}
     * @memberof InlineResponse2007DataItems
     */
    'expense_info'?: InlineResponse2007DataExpenseInfo;
}
/**
 * 
 * @export
 * @interface InlineResponse2007DataPaymentMethodBreakup
 */
export interface InlineResponse2007DataPaymentMethodBreakup {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataPaymentMethodBreakup
     */
    'payment_method'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataPaymentMethodBreakup
     */
    'payment_method_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataPaymentMethodBreakup
     */
    'payment_method_image'?: string;
    /**
     * 
     * @type {InlineResponse2003Balance}
     * @memberof InlineResponse2007DataPaymentMethodBreakup
     */
    'amount'?: InlineResponse2003Balance;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007DataPaymentMethodBreakup
     */
    'payment_type'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Data}
     * @memberof InlineResponse2008
     */
    'data'?: InlineResponse2008Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof InlineResponse2008
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InlineResponse2008Data
 */
export interface InlineResponse2008Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'order_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'service_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'display_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'order_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'order_image'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'payment_type'?: string;
    /**
     * 
     * @type {InlineResponse2003Balance}
     * @memberof InlineResponse2008Data
     */
    'amount'?: InlineResponse2003Balance;
    /**
     * 
     * @type {Array<InlineResponse2007DataPaymentMethodBreakup>}
     * @memberof InlineResponse2008Data
     */
    'payment_method_breakup'?: Array<InlineResponse2007DataPaymentMethodBreakup>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'list_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'detail_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    'detail_notes'?: string;
    /**
     * 
     * @type {Array<InlineResponse2007DataDetailViewItems>}
     * @memberof InlineResponse2008Data
     */
    'detail_view_items'?: Array<InlineResponse2007DataDetailViewItems>;
    /**
     * 
     * @type {InlineResponse2008DataAdditionalDetails}
     * @memberof InlineResponse2008Data
     */
    'additional_details'?: InlineResponse2008DataAdditionalDetails;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008Data
     */
    'not_have_details'?: boolean;
    /**
     * 
     * @type {InlineResponse2007DataExpenseInfo}
     * @memberof InlineResponse2008Data
     */
    'expense_info'?: InlineResponse2007DataExpenseInfo;
}
/**
 * 
 * @export
 * @interface InlineResponse2008DataAdditionalDetails
 */
export interface InlineResponse2008DataAdditionalDetails {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008DataAdditionalDetails
     */
    'p2p_notes'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Data
 */
export interface InlineResponse200Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Data
     */
    'status'?: string;
    /**
     * 
     * @type {Array<InlineResponse200DataFiles>}
     * @memberof InlineResponse200Data
     */
    'files'?: Array<InlineResponse200DataFiles>;
}
/**
 * 
 * @export
 * @interface InlineResponse200DataFiles
 */
export interface InlineResponse200DataFiles {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200DataFiles
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200DataFiles
     */
    'kyc_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200DataFiles
     */
    'kyc_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200DataFiles
     */
    'kyc_reason_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200DataFiles
     */
    'kyc_reason'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200DataFiles
     */
    'uploaded'?: boolean;
}

/**
 * BankAccountApi - axios parameter creator
 * @export
 */
export const BankAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET bank-accounts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [descending] 
         * @param {boolean} [showWithdrawalBlockStatus] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts: async (page?: number, pageSize?: number, sortBy?: string, descending?: string, showWithdrawalBlockStatus?: boolean, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/bank-accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (descending !== undefined) {
                localVarQueryParameter['descending'] = descending;
            }

            if (showWithdrawalBlockStatus !== undefined) {
                localVarQueryParameter['show_withdrawal_block_status'] = showWithdrawalBlockStatus;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountApi - functional programming interface
 * @export
 */
export const BankAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET bank-accounts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [descending] 
         * @param {boolean} [showWithdrawalBlockStatus] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccounts(page?: number, pageSize?: number, sortBy?: string, descending?: string, showWithdrawalBlockStatus?: boolean, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccounts(page, pageSize, sortBy, descending, showWithdrawalBlockStatus, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountApi - factory interface
 * @export
 */
export const BankAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountApiFp(configuration)
    return {
        /**
         * 
         * @summary GET bank-accounts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [descending] 
         * @param {boolean} [showWithdrawalBlockStatus] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts(page?: number, pageSize?: number, sortBy?: string, descending?: string, showWithdrawalBlockStatus?: boolean, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getBankAccounts(page, pageSize, sortBy, descending, showWithdrawalBlockStatus, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBankAccounts operation in BankAccountApi.
 * @export
 * @interface BankAccountApiGetBankAccountsRequest
 */
export interface BankAccountApiGetBankAccountsRequest {
    /**
     * 
     * @type {number}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly descending?: string

    /**
     * 
     * @type {boolean}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly showWithdrawalBlockStatus?: boolean

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof BankAccountApiGetBankAccounts
     */
    readonly xPushtokentype?: string
}

/**
 * BankAccountApi - object-oriented interface
 * @export
 * @class BankAccountApi
 * @extends {BaseAPI}
 */
export class BankAccountApi extends BaseAPI {
    /**
     * 
     * @summary GET bank-accounts
     * @param {BankAccountApiGetBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public getBankAccounts(requestParameters: BankAccountApiGetBankAccountsRequest = {}, options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).getBankAccounts(requestParameters.page, requestParameters.pageSize, requestParameters.sortBy, requestParameters.descending, requestParameters.showWithdrawalBlockStatus, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET balances
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalances: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payment-options/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET profiles
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentOptions: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payment-options/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET balances
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalances(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalances(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET profiles
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentOptions(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentOptions(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary GET balances
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalances(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getBalances(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET profiles
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentOptions(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getPaymentOptions(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBalances operation in PaymentApi.
 * @export
 * @interface PaymentApiGetBalancesRequest
 */
export interface PaymentApiGetBalancesRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetBalances
     */
    readonly xPushtokentype?: string
}

/**
 * Request parameters for getPaymentOptions operation in PaymentApi.
 * @export
 * @interface PaymentApiGetPaymentOptionsRequest
 */
export interface PaymentApiGetPaymentOptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetPaymentOptions
     */
    readonly xPushtokentype?: string
}

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary GET balances
     * @param {PaymentApiGetBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getBalances(requestParameters: PaymentApiGetBalancesRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getBalances(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET profiles
     * @param {PaymentApiGetPaymentOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getPaymentOptions(requestParameters: PaymentApiGetPaymentOptionsRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getPaymentOptions(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET filter-config
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilterConfig: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/order-history/filter-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET order details
         * @param {string} orderId 
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetails: async (orderId: string, countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderDetails', 'orderId', orderId)
            const localVarPath = `/v1/users/order-history/{order_id}/details`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET order-history
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [skipInProgress] 
         * @param {string} [lowerBound] 
         * @param {string} [upperBound] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderHistory: async (countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, page?: number, limit?: number, skipInProgress?: boolean, lowerBound?: string, upperBound?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/order-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skipInProgress !== undefined) {
                localVarQueryParameter['skip_in_progress'] = skipInProgress;
            }

            if (lowerBound !== undefined) {
                localVarQueryParameter['lower_bound'] = lowerBound;
            }

            if (upperBound !== undefined) {
                localVarQueryParameter['upper_bound'] = upperBound;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET KYC status
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserKycStatus: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/kyc/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET profile
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET filter-config
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilterConfig(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilterConfig(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET order details
         * @param {string} orderId 
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderDetails(orderId: string, countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderDetails(orderId, countryCode, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET order-history
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [skipInProgress] 
         * @param {string} [lowerBound] 
         * @param {string} [upperBound] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderHistory(countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, page?: number, limit?: number, skipInProgress?: boolean, lowerBound?: string, upperBound?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderHistory(countryCode, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, page, limit, skipInProgress, lowerBound, upperBound, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET KYC status
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserKycStatus(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserKycStatus(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET profile
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary GET filter-config
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilterConfig(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getFilterConfig(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET order details
         * @param {string} orderId 
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetails(orderId: string, countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.getOrderDetails(orderId, countryCode, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET order-history
         * @param {string} [countryCode] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [skipInProgress] 
         * @param {string} [lowerBound] 
         * @param {string} [upperBound] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderHistory(countryCode?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, page?: number, limit?: number, skipInProgress?: boolean, lowerBound?: string, upperBound?: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getOrderHistory(countryCode, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, page, limit, skipInProgress, lowerBound, upperBound, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET KYC status
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserKycStatus(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getUserKycStatus(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET profile
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getUserProfile(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFilterConfig operation in UserApi.
 * @export
 * @interface UserApiGetFilterConfigRequest
 */
export interface UserApiGetFilterConfigRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetFilterConfig
     */
    readonly xPushtokentype?: string
}

/**
 * Request parameters for getOrderDetails operation in UserApi.
 * @export
 * @interface UserApiGetOrderDetailsRequest
 */
export interface UserApiGetOrderDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly orderId: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly countryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderDetails
     */
    readonly xPushtokentype?: string
}

/**
 * Request parameters for getOrderHistory operation in UserApi.
 * @export
 * @interface UserApiGetOrderHistoryRequest
 */
export interface UserApiGetOrderHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly countryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly xPushtokentype?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiGetOrderHistory
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiGetOrderHistory
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof UserApiGetOrderHistory
     */
    readonly skipInProgress?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly lowerBound?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetOrderHistory
     */
    readonly upperBound?: string
}

/**
 * Request parameters for getUserKycStatus operation in UserApi.
 * @export
 * @interface UserApiGetUserKycStatusRequest
 */
export interface UserApiGetUserKycStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserKycStatus
     */
    readonly xPushtokentype?: string
}

/**
 * Request parameters for getUserProfile operation in UserApi.
 * @export
 * @interface UserApiGetUserProfileRequest
 */
export interface UserApiGetUserProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserProfile
     */
    readonly xPushtokentype?: string
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary GET filter-config
     * @param {UserApiGetFilterConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getFilterConfig(requestParameters: UserApiGetFilterConfigRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getFilterConfig(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET order details
     * @param {UserApiGetOrderDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOrderDetails(requestParameters: UserApiGetOrderDetailsRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOrderDetails(requestParameters.orderId, requestParameters.countryCode, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET order-history
     * @param {UserApiGetOrderHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOrderHistory(requestParameters: UserApiGetOrderHistoryRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOrderHistory(requestParameters.countryCode, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, requestParameters.page, requestParameters.limit, requestParameters.skipInProgress, requestParameters.lowerBound, requestParameters.upperBound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET KYC status
     * @param {UserApiGetUserKycStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserKycStatus(requestParameters: UserApiGetUserKycStatusRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserKycStatus(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET profile
     * @param {UserApiGetUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserProfile(requestParameters: UserApiGetUserProfileRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserProfile(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WithdrawalApi - axios parameter creator
 * @export
 */
export const WithdrawalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET service-fee
         * @param {number} [amount] 
         * @param {string} [type] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceFee: async (amount?: number, type?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/withdrawals/service-fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WithdrawalApi - functional programming interface
 * @export
 */
export const WithdrawalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WithdrawalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET service-fee
         * @param {number} [amount] 
         * @param {string} [type] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceFee(amount?: number, type?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceFee(amount, type, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WithdrawalApi - factory interface
 * @export
 */
export const WithdrawalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WithdrawalApiFp(configuration)
    return {
        /**
         * 
         * @summary GET service-fee
         * @param {number} [amount] 
         * @param {string} [type] 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceFee(amount?: number, type?: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getServiceFee(amount, type, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getServiceFee operation in WithdrawalApi.
 * @export
 * @interface WithdrawalApiGetServiceFeeRequest
 */
export interface WithdrawalApiGetServiceFeeRequest {
    /**
     * 
     * @type {number}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly amount?: number

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof WithdrawalApiGetServiceFee
     */
    readonly xPushtokentype?: string
}

/**
 * WithdrawalApi - object-oriented interface
 * @export
 * @class WithdrawalApi
 * @extends {BaseAPI}
 */
export class WithdrawalApi extends BaseAPI {
    /**
     * 
     * @summary GET service-fee
     * @param {WithdrawalApiGetServiceFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalApi
     */
    public getServiceFee(requestParameters: WithdrawalApiGetServiceFeeRequest = {}, options?: AxiosRequestConfig) {
        return WithdrawalApiFp(this.configuration).getServiceFee(requestParameters.amount, requestParameters.type, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }
}


