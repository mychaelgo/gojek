/* tslint:disable */
/* eslint-disable */
/**
 * goid.gojekapi.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GenerateTokenRequest
 */
export interface GenerateTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenRequest
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenRequest
     */
    'client_secret'?: string;
    /**
     * 
     * @type {GoidTokenData}
     * @memberof GenerateTokenRequest
     */
    'data'?: GoidTokenData;
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenRequest
     */
    'grant_type'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof GenerateTokenRequest
     */
    'scopes'?: Array<any>;
}
/**
 * 
 * @export
 * @interface GenerateTokenResponse
 */
export interface GenerateTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenResponse
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateTokenResponse
     */
    'dbl_enabled'?: boolean;
    /**
     * 
     * @type {GenerateTokenResponseFlags}
     * @memberof GenerateTokenResponse
     */
    'flags'?: GenerateTokenResponseFlags;
}
/**
 * 
 * @export
 * @interface GenerateTokenResponseFlags
 */
export interface GenerateTokenResponseFlags {
    /**
     * 
     * @type {boolean}
     * @memberof GenerateTokenResponseFlags
     */
    'onetap_eligible'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateTokenResponseFlags
     */
    'is_app_pin_set'?: boolean;
}
/**
 * 
 * @export
 * @interface GoidTokenData
 */
export interface GoidTokenData {
    /**
     * OTP from whatsapp or SMS
     * @type {string}
     * @memberof GoidTokenData
     */
    'otp'?: string;
    /**
     * OTP token from login request
     * @type {string}
     * @memberof GoidTokenData
     */
    'otp_token'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestBody
 */
export interface LoginRequestBody {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestBody
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestBody
     */
    'client_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestBody
     */
    'country_code'?: string;
    /**
     * possible value: otp_whatsapp, sms
     * @type {string}
     * @memberof LoginRequestBody
     */
    'login_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestBody
     */
    'magic_link_ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestBody
     */
    'phone_number'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestResponse
 */
export interface LoginRequestResponse {
    /**
     * 
     * @type {LoginRequestResponseData}
     * @memberof LoginRequestResponse
     */
    'data'?: LoginRequestResponseData;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRequestResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof LoginRequestResponse
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface LoginRequestResponseData
 */
export interface LoginRequestResponseData {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestResponseData
     */
    'otp_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginRequestResponseData
     */
    'otp_expires_in'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoginRequestResponseData
     */
    'otp_length'?: number;
    /**
     * 
     * @type {LoginRequestResponseDataNextState}
     * @memberof LoginRequestResponseData
     */
    'next_state'?: LoginRequestResponseDataNextState;
}
/**
 * 
 * @export
 * @interface LoginRequestResponseDataNextState
 */
export interface LoginRequestResponseDataNextState {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestResponseDataNextState
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestResponseDataNextState
     */
    'destination'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginRequestResponseDataNextState
     */
    'timer_in_seconds'?: number;
}

/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate authentication token from OTP
         * @summary POST token
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken: async (xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, generateTokenRequest?: GenerateTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goid/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request OTP to whatsapp or SMS
         * @summary POST request
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {LoginRequestBody} [loginRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginRequest: async (xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, loginRequestBody?: LoginRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goid/login/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate authentication token from OTP
         * @summary POST token
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateToken(xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, generateTokenRequest?: GenerateTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateToken(xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xPlatform, xUniqueid, generateTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request OTP to whatsapp or SMS
         * @summary POST request
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {LoginRequestBody} [loginRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginRequest(xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, loginRequestBody?: LoginRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginRequest(xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xPlatform, xUniqueid, loginRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Generate authentication token from OTP
         * @summary POST token
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken(xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, generateTokenRequest?: GenerateTokenRequest, options?: any): AxiosPromise<GenerateTokenResponse> {
            return localVarFp.generateToken(xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xPlatform, xUniqueid, generateTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Request OTP to whatsapp or SMS
         * @summary POST request
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xPlatform] 
         * @param {string} [xUniqueid] 
         * @param {LoginRequestBody} [loginRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginRequest(xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xPlatform?: string, xUniqueid?: string, loginRequestBody?: LoginRequestBody, options?: any): AxiosPromise<LoginRequestResponse> {
            return localVarFp.loginRequest(xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xPlatform, xUniqueid, loginRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateToken operation in TokenApi.
 * @export
 * @interface TokenApiGenerateTokenRequest
 */
export interface TokenApiGenerateTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xPushtokentype?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiGenerateToken
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {GenerateTokenRequest}
     * @memberof TokenApiGenerateToken
     */
    readonly generateTokenRequest?: GenerateTokenRequest
}

/**
 * Request parameters for loginRequest operation in TokenApi.
 * @export
 * @interface TokenApiLoginRequestRequest
 */
export interface TokenApiLoginRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xPushtokentype?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof TokenApiLoginRequest
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {LoginRequestBody}
     * @memberof TokenApiLoginRequest
     */
    readonly loginRequestBody?: LoginRequestBody
}

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * Generate authentication token from OTP
     * @summary POST token
     * @param {TokenApiGenerateTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public generateToken(requestParameters: TokenApiGenerateTokenRequest = {}, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).generateToken(requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, requestParameters.xPlatform, requestParameters.xUniqueid, requestParameters.generateTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request OTP to whatsapp or SMS
     * @summary POST request
     * @param {TokenApiLoginRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public loginRequest(requestParameters: TokenApiLoginRequestRequest = {}, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).loginRequest(requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, requestParameters.xPlatform, requestParameters.xUniqueid, requestParameters.loginRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


