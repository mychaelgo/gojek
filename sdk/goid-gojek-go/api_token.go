/*
goid.gojekapi.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goid-gojek

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// TokenApiService TokenApi service
type TokenApiService service

type ApiGenerateTokenRequest struct {
	ctx _context.Context
	ApiService *TokenApiService
	xAppversion *string
	xAppid *string
	xDeviceos *string
	xUserType *string
	xPhonemake *string
	xPhonemodel *string
	xPushtokentype *string
	xPlatform *string
	xUniqueid *string
	generateTokenRequest *GenerateTokenRequest
}

func (r ApiGenerateTokenRequest) XAppversion(xAppversion string) ApiGenerateTokenRequest {
	r.xAppversion = &xAppversion
	return r
}
func (r ApiGenerateTokenRequest) XAppid(xAppid string) ApiGenerateTokenRequest {
	r.xAppid = &xAppid
	return r
}
func (r ApiGenerateTokenRequest) XDeviceos(xDeviceos string) ApiGenerateTokenRequest {
	r.xDeviceos = &xDeviceos
	return r
}
func (r ApiGenerateTokenRequest) XUserType(xUserType string) ApiGenerateTokenRequest {
	r.xUserType = &xUserType
	return r
}
func (r ApiGenerateTokenRequest) XPhonemake(xPhonemake string) ApiGenerateTokenRequest {
	r.xPhonemake = &xPhonemake
	return r
}
func (r ApiGenerateTokenRequest) XPhonemodel(xPhonemodel string) ApiGenerateTokenRequest {
	r.xPhonemodel = &xPhonemodel
	return r
}
func (r ApiGenerateTokenRequest) XPushtokentype(xPushtokentype string) ApiGenerateTokenRequest {
	r.xPushtokentype = &xPushtokentype
	return r
}
func (r ApiGenerateTokenRequest) XPlatform(xPlatform string) ApiGenerateTokenRequest {
	r.xPlatform = &xPlatform
	return r
}
func (r ApiGenerateTokenRequest) XUniqueid(xUniqueid string) ApiGenerateTokenRequest {
	r.xUniqueid = &xUniqueid
	return r
}
func (r ApiGenerateTokenRequest) GenerateTokenRequest(generateTokenRequest GenerateTokenRequest) ApiGenerateTokenRequest {
	r.generateTokenRequest = &generateTokenRequest
	return r
}

func (r ApiGenerateTokenRequest) Execute() (GenerateTokenResponse, *_nethttp.Response, error) {
	return r.ApiService.GenerateTokenExecute(r)
}

/*
GenerateToken POST token

Generate authentication token from OTP

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenerateTokenRequest
*/
func (a *TokenApiService) GenerateToken(ctx _context.Context) ApiGenerateTokenRequest {
	return ApiGenerateTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GenerateTokenResponse
func (a *TokenApiService) GenerateTokenExecute(r ApiGenerateTokenRequest) (GenerateTokenResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  GenerateTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenApiService.GenerateToken")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/goid/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAppversion != nil {
		localVarHeaderParams["x-appversion"] = parameterToString(*r.xAppversion, "")
	}
	if r.xAppid != nil {
		localVarHeaderParams["x-appid"] = parameterToString(*r.xAppid, "")
	}
	if r.xDeviceos != nil {
		localVarHeaderParams["x-deviceos"] = parameterToString(*r.xDeviceos, "")
	}
	if r.xUserType != nil {
		localVarHeaderParams["x-user-type"] = parameterToString(*r.xUserType, "")
	}
	if r.xPhonemake != nil {
		localVarHeaderParams["x-phonemake"] = parameterToString(*r.xPhonemake, "")
	}
	if r.xPhonemodel != nil {
		localVarHeaderParams["x-phonemodel"] = parameterToString(*r.xPhonemodel, "")
	}
	if r.xPushtokentype != nil {
		localVarHeaderParams["x-pushtokentype"] = parameterToString(*r.xPushtokentype, "")
	}
	if r.xPlatform != nil {
		localVarHeaderParams["x-platform"] = parameterToString(*r.xPlatform, "")
	}
	if r.xUniqueid != nil {
		localVarHeaderParams["x-uniqueid"] = parameterToString(*r.xUniqueid, "")
	}
	// body params
	localVarPostBody = r.generateTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoginRequestRequest struct {
	ctx _context.Context
	ApiService *TokenApiService
	xAppversion *string
	xAppid *string
	xDeviceos *string
	xUserType *string
	xPhonemake *string
	xPhonemodel *string
	xPushtokentype *string
	xPlatform *string
	xUniqueid *string
	loginRequestBody *LoginRequestBody
}

func (r ApiLoginRequestRequest) XAppversion(xAppversion string) ApiLoginRequestRequest {
	r.xAppversion = &xAppversion
	return r
}
func (r ApiLoginRequestRequest) XAppid(xAppid string) ApiLoginRequestRequest {
	r.xAppid = &xAppid
	return r
}
func (r ApiLoginRequestRequest) XDeviceos(xDeviceos string) ApiLoginRequestRequest {
	r.xDeviceos = &xDeviceos
	return r
}
func (r ApiLoginRequestRequest) XUserType(xUserType string) ApiLoginRequestRequest {
	r.xUserType = &xUserType
	return r
}
func (r ApiLoginRequestRequest) XPhonemake(xPhonemake string) ApiLoginRequestRequest {
	r.xPhonemake = &xPhonemake
	return r
}
func (r ApiLoginRequestRequest) XPhonemodel(xPhonemodel string) ApiLoginRequestRequest {
	r.xPhonemodel = &xPhonemodel
	return r
}
func (r ApiLoginRequestRequest) XPushtokentype(xPushtokentype string) ApiLoginRequestRequest {
	r.xPushtokentype = &xPushtokentype
	return r
}
func (r ApiLoginRequestRequest) XPlatform(xPlatform string) ApiLoginRequestRequest {
	r.xPlatform = &xPlatform
	return r
}
func (r ApiLoginRequestRequest) XUniqueid(xUniqueid string) ApiLoginRequestRequest {
	r.xUniqueid = &xUniqueid
	return r
}
func (r ApiLoginRequestRequest) LoginRequestBody(loginRequestBody LoginRequestBody) ApiLoginRequestRequest {
	r.loginRequestBody = &loginRequestBody
	return r
}

func (r ApiLoginRequestRequest) Execute() (LoginRequestResponse, *_nethttp.Response, error) {
	return r.ApiService.LoginRequestExecute(r)
}

/*
LoginRequest POST request

Request OTP to whatsapp or SMS

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLoginRequestRequest
*/
func (a *TokenApiService) LoginRequest(ctx _context.Context) ApiLoginRequestRequest {
	return ApiLoginRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LoginRequestResponse
func (a *TokenApiService) LoginRequestExecute(r ApiLoginRequestRequest) (LoginRequestResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  LoginRequestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenApiService.LoginRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/goid/login/request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAppversion != nil {
		localVarHeaderParams["x-appversion"] = parameterToString(*r.xAppversion, "")
	}
	if r.xAppid != nil {
		localVarHeaderParams["x-appid"] = parameterToString(*r.xAppid, "")
	}
	if r.xDeviceos != nil {
		localVarHeaderParams["x-deviceos"] = parameterToString(*r.xDeviceos, "")
	}
	if r.xUserType != nil {
		localVarHeaderParams["x-user-type"] = parameterToString(*r.xUserType, "")
	}
	if r.xPhonemake != nil {
		localVarHeaderParams["x-phonemake"] = parameterToString(*r.xPhonemake, "")
	}
	if r.xPhonemodel != nil {
		localVarHeaderParams["x-phonemodel"] = parameterToString(*r.xPhonemodel, "")
	}
	if r.xPushtokentype != nil {
		localVarHeaderParams["x-pushtokentype"] = parameterToString(*r.xPushtokentype, "")
	}
	if r.xPlatform != nil {
		localVarHeaderParams["x-platform"] = parameterToString(*r.xPlatform, "")
	}
	if r.xUniqueid != nil {
		localVarHeaderParams["x-uniqueid"] = parameterToString(*r.xUniqueid, "")
	}
	// body params
	localVarPostBody = r.loginRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
