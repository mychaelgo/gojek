/* tslint:disable */
/* eslint-disable */
/**
 * api.gojekapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetCustomerDataResponse
 */
export interface GetCustomerDataResponse {
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponse
     */
    'message'?: string;
    /**
     * 
     * @type {GetCustomerDataResponseCustomer}
     * @memberof GetCustomerDataResponse
     */
    'customer'?: GetCustomerDataResponseCustomer;
}
/**
 * 
 * @export
 * @interface GetCustomerDataResponseCustomer
 */
export interface GetCustomerDataResponseCustomer {
    /**
     * 
     * @type {number}
     * @memberof GetCustomerDataResponseCustomer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'signed_up_country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'country_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetCustomerDataResponseCustomer
     */
    'email_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'locale_selection_type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetCustomerDataResponseCustomer
     */
    'facebook_connected'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof GetCustomerDataResponseCustomer
     */
    'chat_id'?: object;
    /**
     * 
     * @type {object}
     * @memberof GetCustomerDataResponseCustomer
     */
    'chat_token'?: object;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerDataResponseCustomer
     */
    'created_at'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetCustomerDataResponseCustomer
     */
    'bio'?: object;
    /**
     * 
     * @type {object}
     * @memberof GetCustomerDataResponseCustomer
     */
    'profile_image_url'?: object;
}
/**
 * 
 * @export
 * @interface GetDropoffSpotsResponse
 */
export interface GetDropoffSpotsResponse {
    /**
     * 
     * @type {GetDropoffSpotsResponseData}
     * @memberof GetDropoffSpotsResponse
     */
    'data'?: GetDropoffSpotsResponseData;
}
/**
 * 
 * @export
 * @interface GetDropoffSpotsResponseData
 */
export interface GetDropoffSpotsResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetDropoffSpotsResponseData
     */
    'type'?: string;
    /**
     * 
     * @type {GetDropoffSpotsResponseDataSourceLocation}
     * @memberof GetDropoffSpotsResponseData
     */
    'source_location'?: GetDropoffSpotsResponseDataSourceLocation;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetDropoffSpotsResponseData
     */
    'places'?: Array<object>;
}
/**
 * 
 * @export
 * @interface GetDropoffSpotsResponseDataSourceLocation
 */
export interface GetDropoffSpotsResponseDataSourceLocation {
    /**
     * 
     * @type {string}
     * @memberof GetDropoffSpotsResponseDataSourceLocation
     */
    'place_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDropoffSpotsResponseDataSourceLocation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDropoffSpotsResponseDataSourceLocation
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDropoffSpotsResponseDataSourceLocation
     */
    'image_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetDropoffSpotsResponseDataSourceLocation
     */
    'suggested_visibility_radius'?: number;
}
/**
 * 
 * @export
 * @interface GetPickupSpotsResponse
 */
export interface GetPickupSpotsResponse {
    /**
     * 
     * @type {GetPickupSpotsResponseData}
     * @memberof GetPickupSpotsResponse
     */
    'data'?: GetPickupSpotsResponseData;
}
/**
 * 
 * @export
 * @interface GetPickupSpotsResponseData
 */
export interface GetPickupSpotsResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseData
     */
    'type'?: string;
    /**
     * 
     * @type {GetPickupSpotsResponseDataSourceLocation}
     * @memberof GetPickupSpotsResponseData
     */
    'source_location'?: GetPickupSpotsResponseDataSourceLocation;
    /**
     * 
     * @type {Array<GetPickupSpotsResponseDataPlaces>}
     * @memberof GetPickupSpotsResponseData
     */
    'places'?: Array<GetPickupSpotsResponseDataPlaces>;
}
/**
 * 
 * @export
 * @interface GetPickupSpotsResponseDataPlaces
 */
export interface GetPickupSpotsResponseDataPlaces {
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'place_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetPickupSpotsResponseDataPlaces
     */
    'distance_from_origin'?: number;
}
/**
 * 
 * @export
 * @interface GetPickupSpotsResponseDataSourceLocation
 */
export interface GetPickupSpotsResponseDataSourceLocation {
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataSourceLocation
     */
    'place_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataSourceLocation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPickupSpotsResponseDataSourceLocation
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPickupSpotsResponseDataSourceLocation
     */
    'suggested_visibility_radius'?: number;
}

/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET customer
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerData: async (xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gojek/v2/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET customer
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerData(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerData(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary GET customer
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerData(xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, options?: any): AxiosPromise<GetCustomerDataResponse> {
            return localVarFp.getCustomerData(xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCustomerData operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCustomerDataRequest
 */
export interface CustomerApiGetCustomerDataRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerApiGetCustomerData
     */
    readonly xPushtokentype?: string
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary GET customer
     * @param {CustomerApiGetCustomerDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public getCustomerData(requestParameters: CustomerApiGetCustomerDataRequest = {}, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCustomerData(requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransportApi - axios parameter creator
 * @export
 */
export const TransportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET dropoff spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropoffSpots: async (location: string, serviceType: number, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('getDropoffSpots', 'location', location)
            // verify required parameter 'serviceType' is not null or undefined
            assertParamExists('getDropoffSpots', 'serviceType', serviceType)
            const localVarPath = `/v1/dropoff-spots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (serviceType !== undefined) {
                localVarQueryParameter['service_type'] = serviceType;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }

            if (xSessionId !== undefined && xSessionId !== null) {
                localVarHeaderParameter['x-session-id'] = String(xSessionId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET pickup spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} source 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPickupSpots: async (location: string, serviceType: number, source: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('getPickupSpots', 'location', location)
            // verify required parameter 'serviceType' is not null or undefined
            assertParamExists('getPickupSpots', 'serviceType', serviceType)
            // verify required parameter 'source' is not null or undefined
            assertParamExists('getPickupSpots', 'source', source)
            const localVarPath = `/v1/pickup-spots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (serviceType !== undefined) {
                localVarQueryParameter['service_type'] = serviceType;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (xPlatform !== undefined && xPlatform !== null) {
                localVarHeaderParameter['x-platform'] = String(xPlatform);
            }

            if (gojekCountryCode !== undefined && gojekCountryCode !== null) {
                localVarHeaderParameter['gojek-country-code'] = String(gojekCountryCode);
            }

            if (xUniqueid !== undefined && xUniqueid !== null) {
                localVarHeaderParameter['x-uniqueid'] = String(xUniqueid);
            }

            if (xAppversion !== undefined && xAppversion !== null) {
                localVarHeaderParameter['x-appversion'] = String(xAppversion);
            }

            if (xAppid !== undefined && xAppid !== null) {
                localVarHeaderParameter['x-appid'] = String(xAppid);
            }

            if (xDeviceos !== undefined && xDeviceos !== null) {
                localVarHeaderParameter['x-deviceos'] = String(xDeviceos);
            }

            if (xUserType !== undefined && xUserType !== null) {
                localVarHeaderParameter['x-user-type'] = String(xUserType);
            }

            if (xPhonemake !== undefined && xPhonemake !== null) {
                localVarHeaderParameter['x-phonemake'] = String(xPhonemake);
            }

            if (xPhonemodel !== undefined && xPhonemodel !== null) {
                localVarHeaderParameter['x-phonemodel'] = String(xPhonemodel);
            }

            if (xPushtokentype !== undefined && xPushtokentype !== null) {
                localVarHeaderParameter['x-pushtokentype'] = String(xPushtokentype);
            }

            if (xSessionId !== undefined && xSessionId !== null) {
                localVarHeaderParameter['x-session-id'] = String(xSessionId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportApi - functional programming interface
 * @export
 */
export const TransportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET dropoff spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDropoffSpots(location: string, serviceType: number, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDropoffSpotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDropoffSpots(location, serviceType, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xSessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET pickup spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} source 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPickupSpots(location: string, serviceType: number, source: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPickupSpotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPickupSpots(location, serviceType, source, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xSessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransportApi - factory interface
 * @export
 */
export const TransportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransportApiFp(configuration)
    return {
        /**
         * 
         * @summary GET dropoff spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropoffSpots(location: string, serviceType: number, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options?: any): AxiosPromise<GetDropoffSpotsResponse> {
            return localVarFp.getDropoffSpots(location, serviceType, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET pickup spots
         * @param {string} location 
         * @param {number} serviceType 
         * @param {string} source 
         * @param {string} [xPlatform] 
         * @param {string} [gojekCountryCode] 
         * @param {string} [xUniqueid] 
         * @param {string} [xAppversion] 
         * @param {string} [xAppid] 
         * @param {string} [xDeviceos] 
         * @param {string} [xUserType] 
         * @param {string} [xPhonemake] 
         * @param {string} [xPhonemodel] 
         * @param {string} [xPushtokentype] 
         * @param {string} [xSessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPickupSpots(location: string, serviceType: number, source: string, xPlatform?: string, gojekCountryCode?: string, xUniqueid?: string, xAppversion?: string, xAppid?: string, xDeviceos?: string, xUserType?: string, xPhonemake?: string, xPhonemodel?: string, xPushtokentype?: string, xSessionId?: string, options?: any): AxiosPromise<GetPickupSpotsResponse> {
            return localVarFp.getPickupSpots(location, serviceType, source, xPlatform, gojekCountryCode, xUniqueid, xAppversion, xAppid, xDeviceos, xUserType, xPhonemake, xPhonemodel, xPushtokentype, xSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDropoffSpots operation in TransportApi.
 * @export
 * @interface TransportApiGetDropoffSpotsRequest
 */
export interface TransportApiGetDropoffSpotsRequest {
    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly location: string

    /**
     * 
     * @type {number}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly serviceType: number

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xPushtokentype?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetDropoffSpots
     */
    readonly xSessionId?: string
}

/**
 * Request parameters for getPickupSpots operation in TransportApi.
 * @export
 * @interface TransportApiGetPickupSpotsRequest
 */
export interface TransportApiGetPickupSpotsRequest {
    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly location: string

    /**
     * 
     * @type {number}
     * @memberof TransportApiGetPickupSpots
     */
    readonly serviceType: number

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly source: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xPlatform?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly gojekCountryCode?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xUniqueid?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xAppversion?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xAppid?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xDeviceos?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xUserType?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xPhonemake?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xPhonemodel?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xPushtokentype?: string

    /**
     * 
     * @type {string}
     * @memberof TransportApiGetPickupSpots
     */
    readonly xSessionId?: string
}

/**
 * TransportApi - object-oriented interface
 * @export
 * @class TransportApi
 * @extends {BaseAPI}
 */
export class TransportApi extends BaseAPI {
    /**
     * 
     * @summary GET dropoff spots
     * @param {TransportApiGetDropoffSpotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportApi
     */
    public getDropoffSpots(requestParameters: TransportApiGetDropoffSpotsRequest, options?: AxiosRequestConfig) {
        return TransportApiFp(this.configuration).getDropoffSpots(requestParameters.location, requestParameters.serviceType, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, requestParameters.xSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET pickup spots
     * @param {TransportApiGetPickupSpotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportApi
     */
    public getPickupSpots(requestParameters: TransportApiGetPickupSpotsRequest, options?: AxiosRequestConfig) {
        return TransportApiFp(this.configuration).getPickupSpots(requestParameters.location, requestParameters.serviceType, requestParameters.source, requestParameters.xPlatform, requestParameters.gojekCountryCode, requestParameters.xUniqueid, requestParameters.xAppversion, requestParameters.xAppid, requestParameters.xDeviceos, requestParameters.xUserType, requestParameters.xPhonemake, requestParameters.xPhonemodel, requestParameters.xPushtokentype, requestParameters.xSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}


