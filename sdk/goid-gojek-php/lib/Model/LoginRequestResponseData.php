<?php
/**
 * LoginRequestResponseData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * goid.gojekapi.com
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoginRequestResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LoginRequestResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'loginRequestResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'otp_token' => 'string',
        'otp_expires_in' => 'float',
        'otp_length' => 'float',
        'next_state' => '\OpenAPI\Client\Model\LoginRequestResponseDataNextState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'otp_token' => null,
        'otp_expires_in' => null,
        'otp_length' => null,
        'next_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'otp_token' => 'otp_token',
        'otp_expires_in' => 'otp_expires_in',
        'otp_length' => 'otp_length',
        'next_state' => 'next_state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'otp_token' => 'setOtpToken',
        'otp_expires_in' => 'setOtpExpiresIn',
        'otp_length' => 'setOtpLength',
        'next_state' => 'setNextState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'otp_token' => 'getOtpToken',
        'otp_expires_in' => 'getOtpExpiresIn',
        'otp_length' => 'getOtpLength',
        'next_state' => 'getNextState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['otp_token'] = $data['otp_token'] ?? null;
        $this->container['otp_expires_in'] = $data['otp_expires_in'] ?? null;
        $this->container['otp_length'] = $data['otp_length'] ?? null;
        $this->container['next_state'] = $data['next_state'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets otp_token
     *
     * @return string|null
     */
    public function getOtpToken()
    {
        return $this->container['otp_token'];
    }

    /**
     * Sets otp_token
     *
     * @param string|null $otp_token otp_token
     *
     * @return self
     */
    public function setOtpToken($otp_token)
    {
        $this->container['otp_token'] = $otp_token;

        return $this;
    }

    /**
     * Gets otp_expires_in
     *
     * @return float|null
     */
    public function getOtpExpiresIn()
    {
        return $this->container['otp_expires_in'];
    }

    /**
     * Sets otp_expires_in
     *
     * @param float|null $otp_expires_in otp_expires_in
     *
     * @return self
     */
    public function setOtpExpiresIn($otp_expires_in)
    {
        $this->container['otp_expires_in'] = $otp_expires_in;

        return $this;
    }

    /**
     * Gets otp_length
     *
     * @return float|null
     */
    public function getOtpLength()
    {
        return $this->container['otp_length'];
    }

    /**
     * Sets otp_length
     *
     * @param float|null $otp_length otp_length
     *
     * @return self
     */
    public function setOtpLength($otp_length)
    {
        $this->container['otp_length'] = $otp_length;

        return $this;
    }

    /**
     * Gets next_state
     *
     * @return \OpenAPI\Client\Model\LoginRequestResponseDataNextState|null
     */
    public function getNextState()
    {
        return $this->container['next_state'];
    }

    /**
     * Sets next_state
     *
     * @param \OpenAPI\Client\Model\LoginRequestResponseDataNextState|null $next_state next_state
     *
     * @return self
     */
    public function setNextState($next_state)
    {
        $this->container['next_state'] = $next_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


